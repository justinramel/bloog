SUBMITTING POSTS

View -> Controller

No longer using generators!

Using ActiveModel
=================

extend ActiveModel::Naming
include ActiveModel::Conversion

def persisted?
  false
end

Without these settings you get the following error on web page:

undefined method `model_name' for Post:Class

with modules included the post tests give the error:

uninitialized constant Post::ActiveModel

With require 'active_record'
Finished in 0.000845 seconds.

???? Still pretty fast!


???? I'm not seeing the Notice messages????


????? Aggregate root? ?????

This pattern has some attractive properties. Having “parent” (I use the term loosely) objects mediate access to “child” objects gives us a natural “seam” in our design. At the seam, we can do a number of things:


1. Control access based on authorization information—as we saw in “*Posts vs. Entries.
??????
2. Pre-load child objects with a reference back to their parent. The #new_post method above does this, enabling the post object to pub- lish itself.
?????? Anthony a valid reason for the post_source pattern?


3. Save a reference to the child object in the parent. ActiveRecord’s autosave facility does this. When we are careful to access child objects from the parent, ActiveRecord is able to persist all new, modified, or deleted child objects automatically when the parent object is saved.
4. Decide the actual class of the object to be instantiated, based on the parameters or the state of the parent.


Lone wolf instantiations
The Rob Booth of objects?


Getting the tests running again
===============================

def stub_module(full_name)
  full_name.to_s.split(/::/).inject(Object) do |context, name|
    begin
      context.const_get(name)
    rescue NameError
      context.const_set(name, Module.new)
    end
  end
end

???? Describe how this works!

Simple stub speed:

Finished in 0.000837 seconds.

stub_module speed:

Finished in 0.000874 seconds.

Just requiring active model....

Finished in 0.000844 seconds.

Hmm....

--------------------------------------------------------------------------------
27th APRIL

Adding Timestamps
=================

Outside in again starting at view and working our way in.

https://gist.github.com/7937366575c589de10d2

NOTE: Time cop version not using injected time
----------------------------------------------
    describe "after publishing" do
      before do
        @now = DateTime.parse("2011-09-11T02:56")
        Timecop.freeze(@now)

        @it.blog = stub!
        @it.publish
      end

      it "is a datetime" do
        @it.pubdate.must_equal(@now)
      end

      after do
        Timecop.return
      end
    end

OMG Dependancy injection
========================

Poor mans!

Delayed post a reason to use parameter injection? No code changes. Open closed
principal.

""
Our tests influenced us to factor out the responsibility for determining a post’s timestamp into a discrete object. By letting our discipline of test isolation drive our design, we arrived at a system that respects SRP without even really thinking about it.
""

Injecting only the dependencies we need
=======================================
You might have wondered why we inject a callable @post_source instead of simply having a @post_class variable which defaults to Post.
YES I WAS!

Oh by the way, that post_source? It’s a factory, as in “the Factory pattern”. I didn’t want to scare you off with big pattern talk, so I snuck it in under an assumed name ;-)

Sorting and limiting posts
==========================
Back to tdd

def entries
  @entries.sort_by{|e| e.pubdate}.reverse.take(10)
end

Nice and all pure ruby!

Now that we’re using ActiveModel to satisfy our own expectations as well as Rails’ expectations, we can no longer stub out the ActiveModel modules when running in isolation. We must use the real thing.
These lines will have to go:
stub_module ’ActiveModel::Conversion’
stub_module ’ActiveModel::Naming’

SO WE COULD HAVE JUST DONE THIS IN THE FIRST PLACE?

By explicitly requiring ActiveModel only in files which need it, we don’t saddle unrelated tests with the extra load time.

WHAT LOAD TIME???????? Are we missing something here? Still running at:

Finished in 0.047724 seconds.

Adding Validation
=================

dont_allow - aliased with do_not_allow, dont_call, and do_not_call

dont_allow sets an expectation on the Double that it will never be called. If the Double is called, then a TimesCalledError is raised.

dont_allow(User).find('42')
User.find('42') # raises a TimesCalledError

NOTE::My post spec pubdate specs stopped working at this point did yours???
